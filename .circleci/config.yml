
# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#

version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.1

    working_directory: ~/repo

    steps:
      - checkout
      - restore_cache:
          keys:
              - v1-dependencies-{{ checksum "requirements.txt" }}
              # fallback to using the latest cache if no exact match is found
              - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
  test:

    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.1
        environment:
         APP_SETTINGS: testing
         DATABASE_URL: postgresql://circleci@localhost/circlecidb
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: circleci/postgres:9.6
        environment:
          POSTGRES_DB: circlecidb
          POSTGRES_USER: circleci
          POSTGRES_PASSWORD: ''

    working_directory: ~/repo

    steps:
      - checkout
      - run: mkdir reports
      - restore_cache:
          keys:
              - v1-dependencies-{{ checksum "requirements.txt" }}
              # fallback to using the latest cache if no exact match is found
              - v1-dependencies-

      - run:
         name: confirm postgres is up
         command: |
           count=0
           while [ $count -lt 12 ] ; do
              if exec 10<>/dev/tcp/127.0.0.1/5432; then
                echo "Hey, postgres is up"
                break
              fi
              sleep 5
              count=$((count + 1))
           done
           if [ $count -eq 12 ]; then
             echo "Postgres is still down!"
             exit 1
           fi
      # run tests!
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            nosetests --with-coverage

      - store_artifacts:
          path: reports
          destination: reports

  bump-version-patch: &bump-version-config
    docker:
      - image: circleci/python:2.7.13

    working_directory: ~/repo

    steps:
      - run: exit 0
  bump-version-minor:
    <<: *bump-version-config
  bump-version-major:
    <<: *bump-version-config
  bump-patch: &bump-config
    docker:
      - image: circleci/python:2.7.13
        environment:
          BUMP_LEVEL: patch

    working_directory: ~/repo

    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          - v1-dependencies-
      - run:
          name: Create bump config
          command: |
            source venv/bin/activate
            git config --global user.email "ci@circleci"
            git config --global user.name "Circle CI"
            bumpversion --message "[skip ci] Bump version: {current_version} -> {new_version}" $BUMP_LEVEL
      - add_ssh_keys:
          fingerprints:
            - "70:20:36:38:3b:3a:b4:a5:c3:08:7e:2e:54:04:a6:1c"
      - run:
          name: Push version commit
          command: |
            git push --tags origin master --force
  bump-minor:
    <<: *bump-config
    docker:
      - image: circleci/python:2.7.13
        environment:
          BUMP_LEVEL: minor
  bump-major:
    <<: *bump-config
    docker:
      - image: circleci/python:2.7.13
        environment:
          BUMP_LEVEL: major

  deployment:
    docker:
      - image: circleci/python:3.6.1

    working_directory: ~/repo

    steps:
      - checkout
      - run: bash .circleci/setup-heroku.sh
      - add_ssh_keys:
          fingerprints:
            - "39:79:40:24:11:64:bc:6f:e8:b4:be:7a:18:c5:b6:84"
      - deploy:
          name: Deploy Tasks branch to Heroku
          command: |
            if [ "${CIRCLE_BRANCH}" == "tasks" ]; then
              git push heroku tasks:master
              heroku run python manage.py db upgrade
              heroku restart
            fi
workflows:
  version: 2
  build_and_test:
    jobs:
      - build

      - test:
          requires:
            - build

      - bump-version-patch:
          type: approval

      - bump-version-minor:
          type: approval

      - bump-version-major:
          type: approval

      - bump-patch:
          requires:
            - bump-version-patch

      - bump-minor:
          requires:
            - bump-version-minor

      - bump-major:
          requires:
            - bump-version-major
            
      - deployment:
          requires:
            - test